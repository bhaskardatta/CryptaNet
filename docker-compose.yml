# CryptaNet Production Deployment - Multi-Service Architecture
# ============================================================

version: '3.8'

services:
  # Backend API Service
  cryptanet-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cryptanet-backend
    ports:
      - "5004:5004"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=simple_backend.py
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - cryptanet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - cryptanet-privacy
      - cryptanet-anomaly
    
  # Privacy Layer Service
  cryptanet-privacy:
    build:
      context: ./privacy_layer
      dockerfile: Dockerfile
    container_name: cryptanet-privacy
    ports:
      - "5003:5003"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - cryptanet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  # Anomaly Detection Service
  cryptanet-anomaly:
    build:
      context: ./anomaly_detection
      dockerfile: Dockerfile
    container_name: cryptanet-anomaly
    ports:
      - "5002:5002"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - cryptanet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  # Frontend Dashboard
  cryptanet-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cryptanet-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5004
      - REACT_APP_ENV=production
    networks:
      - cryptanet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - cryptanet-backend
    
  # Analytics Engine (Optional - for standalone analytics processing)
  cryptanet-analytics:
    build:
      context: .
      dockerfile: Dockerfile.analytics
    container_name: cryptanet-analytics
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./alerts.db:/app/alerts.db
    networks:
      - cryptanet-network
    restart: unless-stopped
    depends_on:
      - cryptanet-backend
    
  # Nginx Reverse Proxy (Production Load Balancer)
  cryptanet-proxy:
    image: nginx:alpine
    container_name: cryptanet-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - cryptanet-network
    restart: unless-stopped
    depends_on:
      - cryptanet-frontend
      - cryptanet-backend
      
  # Redis Cache (Optional - for high performance caching)
  cryptanet-redis:
    image: redis:7-alpine
    container_name: cryptanet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cryptanet-network
    command: redis-server --appendonly yes
    restart: unless-stopped
    
  # Monitoring & Metrics (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptanet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - cryptanet-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    container_name: cryptanet-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - cryptanet-network
    restart: unless-stopped
    depends_on:
      - prometheus

# Network Configuration
networks:
  cryptanet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
